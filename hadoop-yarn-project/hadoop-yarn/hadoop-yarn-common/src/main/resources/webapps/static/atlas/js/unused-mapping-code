/*
var nodesUsable = fullNamedNodes;
var mixedApps = [];
function generateFakeApps(inApps) {
  if (mixedApps.length !== 0) {
    // each call will add a node, if any, to a fake app
    for (var i in mixedApps) {
      if (mixedApps[i].reservationId.indexOf('fakeApp_') > -1) {
        var fakeApp = mixedApps[i];
        fakeApp.finishTime = fakeApp.finishTime + minute * 0.2;
        if (nodesUsable.length > 0) {
          var newNode = nodesUsable.pop();
          console.log('add node', fakeApp.reservationId, newNode);
          fakeApp.ranNodes.push(newNode);
        }
      }
    }
    return;
  }

  for (var idx in inApps) {
    var app = inApps[idx];
    mixedApps.push(app);
    console.log('add into mixed', app.reservationId);

    if (Number(idx) !== 0) {  // only create one fake app now
      continue;
    }

    var id = 'fakeApp_' + idx;
    // assume real apps have a non-zero finishTime
    var startTime = Math.random() * minute * 2 + minute * 3 + app.finishTime;
    var finishTime = Math.random() * minute * 2 + minute * 5 + startTime;
    var firstNode = nodesUsable.pop();
    var newApp =
      {reservationId: id,
       startTime: startTime,
       finishTime: finishTime,
       ranNodes: [firstNode]
      };
    mixedApps.push(newApp);
    console.log('add into mixed', newApp.reservationId, firstNode);
  }
}
*/


/*

function getCombinations(level) {
  var data = [
    "[0, 0]",
    "[0, 2]",
    "[1, 2]",
    "[1, 0]"
  ];

  if (level === 0) {
    return [[data[0]]];
  } else {
    combo = getCombinations(level - 1);
    var result = [];
    for (var c in combo) {
      var sequence = combo[c];
      for (var s = sequence.length; s >= 0; s++) {
        result.push(sequence.splice(s, 0, data[level]));
      }
    }
    return result;
  }          
}

function testRackData() {
  var nodeId = 'rr134';
  var record = [];
  var i = 0;
  for (i = 0; i < 100; i++) {
    record.push(0);
  }
  var start = 0;
  var finish = 0;

  var count = 0;
  var data = [];
  while (count < 25) {
    r1 = Math.floor(Math.random() * 100);
    r2 = Math.floor(Math.random() * 100);

    if (r1 === r2) {
      continue;
    }
    count++;

    start = r1;
    finish = r2;
    if (r1 > r2) {
      start = r2;
      finish = r1;
    }

    for (i = start; i < finish; i++) {
      record[i]++;
    }

    console.log('TEST', start, finish);

    // Note: Need to remove the treatment of startTime and finishTime
    // in buildRackUsage when using this test
    data = buildRackUsage(data, start, finish, 1);
    for (i in data) {
      console.log('result data', i, data[i]);
    }

    var j;
    for (i = 0; i < data.length; i++) {
      var current = data[i];

      // check interval
      if (current.from >= current.to) {
        console.log('ERROR: order in interval wrong', current);
        return;
      }
      for (j = current.from; j < current.to; j++) {
        if (record[j] !== current.value) {
          console.log('ERROR: value in interval wrong', j, record[j], current);
          return;
        }
      }

      // check gaps
      if (i + 1 < data.length) {
        var next = data[i+1];
        if (current.to > next.from) {
          console.log('ERROR: order in between wrong', current, next);
          return;
        }
        for (j = current.to; j < next.from; j++) {
          if (record[j] !== 0) {
            console.log('ERROR: value in gap wrong', j, record[j]);
            return;
          }
        }
      }
      if (i === 0) {
        for (j = 0; j < current.from; j++) {
          if (record[j] !== 0) {
            console.log('ERROR: value at beginning wrong', j, record[j]);
            return;
          }
        }
      }
      if (i + 1 === data.length) {
        for (j = current.to; j < 100; j++) {
          if (record[j] !== 0) {
            console.log('ERROR: value at end wrong', j, record[j]);
            return;
          }
        }
      }

    }  // for (i in data)
  }  // while
  console.log('TEST DONE');
}

// How to use: Replace makePendingAllocSeriesForOnePartition() calls
// with this function.  Use the series to carry the "diffs" (see
// comments in makePendingAppSeries()).  This function generate
// series' with randomly generated data.  It also checks the result
// using a parallel tracking and computing system.
function testPendingAllocation() {
  var nodeId = 'rr134';
  var record = [];
  var i = 0;
  for (i = 0; i < 100; i++) {
    record.push(0);
  }
  var start = 0;
  var finish = 0;

  // The test generates ranges in [0..99] and tracks the values in a
  // a simple array of 100 slots.  The ranges are placed into 3
  // separate data groups, each simulates an app's pending allocations
  // for one partition.

  var count = 0;
  var dataArray = [];
  var dataTotal = [];
  for (i = 0; i < 3; i++) {
    dataArray.push([]);
  }
  while (count < 12) {
    r1 = Math.floor(Math.random() * 100);
    r2 = Math.floor(Math.random() * 100);

    if (r1 === r2) {
      continue;
    }
    count++;

    start = r1;
    finish = r2;
    if (r1 > r2) {
      start = r2;
      finish = r1;
    }

    for (i = start; i < finish; i++) {
      record[i]++;
    }

    dataIdx = Math.floor(Math.random() * 3);
    console.log('add into data array', dataIdx, start, finish);
    var data = dataArray[dataIdx];
    dataArray[dataIdx] = buildRackUsage(data, start, finish, 1);
  }

  for (i = 0; i < 3; i++) {
    console.log('fake app', i);
    for (var d in dataArray[i]) {
      console.log(d, dataArray[i][d]);
    }
  }

  // Build the total usage into "data".  Build the diff for each
  // "app" seriesArray.

  var partition = groupCollection['p0'];
  var seriesArray = [];
  var apps = ['a0', 'a1', 'a2'];
  var data = [];
  for (i in apps) {
    var appId = apps[i];
    var appData = dataArray[i];
    var prevData = duplicateUsageData(data);
    for (var d in appData) {
      data = buildRackUsage(data, appData[d].from, appData[d].to,
                            appData[d].value);
    }
    if (partition.expanded) {
      var currentData = duplicateUsageData(data);
      var partitionAppSeries = makePartitionAppSeries(partition, appId,
                                                      prevData,
                                                      currentData);
      if (partitionAppSeries !== null) {
        seriesArray.push(partitionAppSeries);
      }
    }
  }

  verifyResults(record, data, dataArray, seriesArray);
  console.log('TEST DONE');

  if (!partition.expanded) {
    var s = makeCollapsedGroupSeries(partition, data);
    if (s !== null) {
      seriesArray.push(s);
    }
  }
  return seriesArray;
}

function printRecord(record) {
  var s = '';
  for (i = 0; i < record.length; i++) {
    s += i.toString() + ':' + record[i].toString() + ' ';
  }
  console.log(s);
}

function verifyResults(record, data, dataArray, seriesArray) {
  var i, j, k;

  console.log('COMPARE');
  for (i = 0; i < dataArray.length; i++) {
    console.log('dataArray element', i);
    for (j = 0; j < dataArray[i].length; j++) {
      console.log(j, dataArray[i][j]);
    }
  }

  console.log('accumulated data');
  for (i = 0; i < data.length; i++) {
    console.log(i, data[i]);
  }

  printRecord(record);

  var r1 = [];
  var r2 = [];
  for (i in record) {
    r1.push(0);
    r2.push(0);
  }

  // test pending allocations.  add each data group in dataArray
  // into a tracking record.  add the diffs from seriesArray into
  // a separate tracking record.  then compare the two.

  for (i in dataArray) {
    var appData = dataArray[i];
    for (j in appData) {
      var segment = appData[j];
      for (k = segment.from; k < segment.to; k++) {
        r1[k] += segment.value;
      }
    }
    var diffs = seriesArray[i].diffs;
    for (j in diffs) {
      var diff = diffs[j];
      console.log('diff', j, diff);
      for (k = diff.from; k < diff.to; k++) {
        if (diff.low !== r2[k]) {
          console.log('ERROR: low !== value', i, j, k, r2[k], diff);
          alert('ERROR');
        } else {
          r2[k] = diff.high
        }
      }
    }
    for (j in record) {
      if (r1[j] !== r2[j]) {
        printRecord(r1);
        printRecord(r2);
        console.log('ERROR: r1 !== r2 at', i, j, r1[j], r2[j]);
        alert('ERROR');
        return;
      }
    }
  }

  // the following very "data" matches tracking "record".  it's
  // the same code in function testRackData

  for (i = 0; i < data.length; i++) {
    var current = data[i];

    // check interval
    if (current.from >= current.to) {
      console.log('ERROR: order in interval wrong', current);
      alert('ERROR');
      return;
    }
    for (j = current.from; j < current.to; j++) {
      if (record[j] !== current.value) {
        console.log('ERROR: value in interval wrong', j, record[j], current);
        alert('ERROR');
        return;
      }
    }

    // check gaps
    if (i + 1 < data.length) {
      var next = data[i+1];
      if (current.to > next.from) {
        console.log('ERROR: order in between wrong', current, next);
        alert('ERROR');
        return;
      }
      for (j = current.to; j < next.from; j++) {
        if (record[j] !== 0) {
          console.log('ERROR: value in gap wrong', j, record[j]);
          alert('ERROR');
          return;
        }
      }
    }
    if (i === 0) {
      for (j = 0; j < current.from; j++) {
        if (record[j] !== 0) {
          console.log('ERROR: value at beginning wrong', j, record[j]);
          alert('ERROR');
          return;
        }
      }
    }
    if (i + 1 === data.length) {
      for (j = current.to; j < 100; j++) {
        if (record[j] !== 0) {
          console.log('ERROR: value at end wrong', j, record[j]);
          alert('ERROR');
          return;
        }
      }
    }
  }  // for (i in data)

  console.log('SUCCESS');
}

*/

/*
$(function () {
  var chart;
  var chartOptions = {
//    chart = $('#container').highcharts({

    chart: {
      type: 'columnrange',
      inverted: true
    },

    title: {
      text: 'Temperature variation by month'
    },

    subtitle: {
      text: 'Observed in Vik i Sogn, Norway'
    },

    xAxis: {
      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    },

    yAxis: {
      title: {
        text: 'Temperature ( °C )'
      }
    },

    tooltip: {
      valueSuffix: '°C',

      formatter: function() {
        return this.series.name;
      },
      positioner: function (labelWidth, labelHeight, point) {
        var tooltipX, tooltipY;
        if (point.plotX + labelWidth > chart.plotWidth) {
          tooltipX = point.plotX + chart.plotLeft - labelWidth - 20;
        } else {
          tooltipX = point.plotX + chart.plotLeft + 20;
        }
        tooltipY = point.plotY + chart.plotTop - 20;
        return {
          x: tooltipX,
          y: tooltipY
        };
      }
    },

    legend: {
      enabled: false
    },

    series: [{
      type: 'columnrange',
      stacking: 'normal',
      name: 'Temperatures',
      data: [
        {x: 0,
         low: -50, high: -30},
        {x: 0,
         low: -19.7, high: 8},
        {x: 0,
         low: 9, high: 35},
        {x: 2,
         low: -20, high: -10},
        {x: 2,
         low: 0, high: 8},
        {x: 2,
         low: 8.1, high: 13}
      ]},
      {
        name: 'another',
        stacking: 'normal',
        data: [
          {x: 0,
           low: 35, high: 40},
          {x: 0,
           low: 41, high: 48},
          {x: 1,
           low: -20, high: -10},
          {x: 1,
           low: 0, high: 8},
          {x: 2,
           low: 15, high: 20}
      ]}
            ]
            
  };

  chart = $('#chart_container').highcharts(chartOptions).highcharts();
});

*/

/* template to try small test cases
$(function () {

    $('#chart_container').highcharts({
        title: {
            text: 'Height vs Weight'
        },
        subtitle: {
            text: 'Polygon series in Highcharts'
        },
        xAxis: {
            gridLineWidth: 1,
            title: {
                enabled: true,
                text: 'Height (cm)'
            },
            startOnTick: true,
            endOnTick: true,
            showLastLabel: true
        },
        yAxis: {
            title: {
                text: 'Weight (kg)'
            }
        },
        legend: {
            layout: 'vertical',
            align: 'right',
            verticalAlign: 'middle'
        },
        series: [{
            name:'Target',
            id:'Red',
            someText:'Showing custom text for Blue Polygon',
            type: 'polygon',
            data: [[153, 42], [149, 6], [49, 5], [52, 6]], 
            color: Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0.5).get(),
            enableMouseTracking: true
        },{
            name:  'RedSeries',
            type: 'polygon',
              someText:'Showing description for Red Polygon',
            data: [[53, 2], [49, 46], [149, 55], [152, 60]], 
            color:'red',
            enableMouseTracking: true

        }],
        tooltip: {
             formatter: function() {
               return (series.name === 'Target' ? 'a a' : 'b b');
             }
        }
    });
});

*/
